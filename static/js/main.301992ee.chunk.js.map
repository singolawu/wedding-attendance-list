{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","getData","Firebase","database","ref","on","snapshot","state","snapshotToArray","console","log","setState","data","transitionChanged","e","target","name","value","indexChanged","index","initializeApp","this","returnArr","forEach","childSnapshot","item","val","key","push","className","style","width","paddingLeft","paddingRight","textAlign","colSpan","map","words","attendance","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2UAYeA,EAXA,CACbC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBC+FFC,G,kBAjGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAYRC,QAAU,WACEC,IAASC,WAAWC,IAAI,uBAC9BC,GAAG,SAAS,SAAAC,GACd,IAAMC,EAAQ,EAAKC,gBAAgBF,GACnCG,QAAQC,IAAI,CAAEH,UACd,EAAKI,SAAS,CACZC,KAAML,QAnBO,EAsCnBM,kBAAoB,SAAAC,GAClB,EAAKH,SAAL,eAAiBG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,SAvCzB,EA0CnBC,aAAe,SAAAC,GACb,EAAKR,SAAS,CAAEQ,WAxChB,EAAKZ,MAAQ,CACXK,KAAM,IAJS,E,iFASjBV,IAASkB,cAAc9B,GACvB+B,KAAKpB,Y,sCAeSK,GACd,IAAIgB,EAAY,GAShB,OAPAhB,EAASiB,SAAQ,SAAUC,GACzB,IAAIC,EAAOD,EAAcE,MACzBD,EAAKE,IAAMH,EAAcG,IAEzBL,EAAUM,KAAKH,MAGVH,I,+BAYP,OACE,yBAAKO,UAAU,OACb,2BAAOC,MAAO,CAAEC,MAAO,OAAQC,YAAa,GAAIC,aAAc,KAC5D,2BAAOH,MAAO,CAAEI,UAAW,WACzB,wBAAIJ,MAAO,CAAEC,MAAO,SAClB,wBAAII,QAAS,GAAb,4BAIF,4BACE,wBAAIL,MAAO,CAAEC,MAAO,QAApB,QAGA,wBAAID,MAAO,CAAEC,MAAO,QAApB,cAGA,wBAAID,MAAO,CAAEC,MAAO,QAApB,eAKJ,+BACGV,KAAKd,MAAMK,KAAKwB,KAAI,SAACX,GAAD,OACnB,4BACE,4BACE,8BACGA,EAAKT,OAGV,4BACE,8BACGS,EAAKY,QAGV,4BACE,8BACGZ,EAAKa,wB,GApFRC,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.301992ee.chunk.js","sourcesContent":["\nconst config = {\n  apiKey: 'AIzaSyDEVtDo5e0Oxo_RVI7qflfYrRPNPLhv4XU',\n  authDomain: 'wedding-270412.firebaseapp.com',\n  databaseURL: 'https://wedding-270412.firebaseio.com',\n  projectId: 'wedding-270412',\n  storageBucket: 'wedding-270412.appspot.com',\n  messagingSenderId: '975545952325',\n  appId: '1:975545952325:web:9f4b1b9d6fa80491d7db2c',\n  measurementId: 'G-DVHB9FMSNX'\n}\n\nexport default config\n","import React, { Component } from 'react';\nimport Firebase from 'firebase';\nimport config from './config';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: []\n    }\n  }\n\n  componentDidMount() {\n    Firebase.initializeApp(config);\n    this.getData()\n  }\n\n  getData = () => {\n    let ref = Firebase.database().ref('/wedding-attendance');\n    ref.on('value', snapshot => {\n      const state = this.snapshotToArray(snapshot)\n      console.log({ state })\n      this.setState({\n        data: state\n      })\n    });\n\n  }\n\n  snapshotToArray(snapshot) {\n    var returnArr = [];\n\n    snapshot.forEach(function (childSnapshot) {\n      var item = childSnapshot.val();\n      item.key = childSnapshot.key;\n\n      returnArr.push(item);\n    });\n\n    return returnArr;\n  };\n\n  transitionChanged = e => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  indexChanged = index => {\n    this.setState({ index });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <table style={{ width: '100%', paddingLeft: 20, paddingRight: 20 }}>\n          <thead style={{ textAlign: 'center' }}>\n            <tr style={{ width: '100%'}}>\n              <th colSpan={3}>\n                Daftar Hadir Pernikahan\n              </th>\n            </tr>\n            <tr>\n              <th style={{ width: '20%' }}>\n                Nama\n              </th>\n              <th style={{ width: '60%' }}>\n                Ucapan/Doa\n              </th>\n              <th style={{ width: '20%' }}>\n                Kehadiran\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.data.map((item) =>\n              < tr >\n                <td>\n                  <text>\n                    {item.name}\n                  </text>\n                </td>\n                <td>\n                  <text>\n                    {item.words}\n                  </text>\n                </td>\n                <td>\n                  <text>\n                    {item.attendance}\n                  </text>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}